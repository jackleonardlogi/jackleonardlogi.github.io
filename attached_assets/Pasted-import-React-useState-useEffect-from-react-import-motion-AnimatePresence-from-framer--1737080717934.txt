import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  VideoIcon,
  MicIcon,
  MonitorIcon,
  ImageIcon,
  MessageSquareIcon,
  BellIcon,
  KeyboardIcon,
  MousePointerIcon,
  SettingsIcon,
  SpeakerIcon,
  SunIcon,
  MoonIcon,
  LockIcon
} from 'lucide-react';

const functionKeys = [
  {
    key: 'esc',
    icon: <LockIcon className="w-5 h-5" />,
    baseFunction: 'Lock',
    shortcut: 'Fn + Esc',
    macroFunction: 'Lock Screen',
    description: 'Instantly lock your computer'
  },
  {
    key: 'F1',
    icon: <VideoIcon className="w-5 h-5" />,
    baseFunction: 'Help',
    shortcut: 'Fn + F1',
    macroFunction: 'Start Meeting',
    description: 'Launch Zoom meeting'
  },
  {
    key: 'F2',
    icon: <MicIcon className="w-5 h-5" />,
    baseFunction: 'Rename',
    shortcut: 'Fn + F2',
    macroFunction: 'Toggle Mute',
    description: 'Mute/unmute microphone'
  },
  {
    key: 'F3',
    icon: <MonitorIcon className="w-5 h-5" />,
    baseFunction: 'Search',
    shortcut: 'Fn + F3',
    macroFunction: 'Screen Share',
    description: 'Start screen sharing'
  },
  {
    key: 'F4',
    icon: <ImageIcon className="w-5 h-5" />,
    baseFunction: 'Address',
    shortcut: 'Fn + F4',
    macroFunction: 'Screenshot',
    description: 'Capture screen area'
  },
  {
    key: 'F5',
    icon: <MessageSquareIcon className="w-5 h-5" />,
    baseFunction: 'Refresh',
    shortcut: 'Fn + F5',
    macroFunction: 'Chat',
    description: 'Open Teams chat'
  },
  {
    key: 'F6',
    icon: <BellIcon className="w-5 h-5" />,
    baseFunction: 'Security',
    shortcut: 'Fn + F6',
    macroFunction: 'DND',
    description: 'Toggle Do Not Disturb'
  },
  {
    key: 'F7',
    icon: <KeyboardIcon className="w-5 h-5" />,
    baseFunction: 'Previous',
    shortcut: 'Fn + F7',
    macroFunction: 'Macros',
    description: 'Show all macros'
  },
  {
    key: 'F8',
    icon: <MousePointerIcon className="w-5 h-5" />,
    baseFunction: 'Play',
    shortcut: 'Fn + F8',
    macroFunction: 'Mouse',
    description: 'Mouse settings'
  },
  {
    key: 'F9',
    icon: <SettingsIcon className="w-5 h-5" />,
    baseFunction: 'Next',
    shortcut: 'Fn + F9',
    macroFunction: 'Settings',
    description: 'Open Options+'
  },
  {
    key: 'F10',
    icon: <SpeakerIcon className="w-5 h-5" />,
    baseFunction: 'Mute',
    shortcut: 'Fn + F10',
    macroFunction: 'Audio',
    description: 'Audio settings'
  },
  {
    key: 'F11',
    icon: <SunIcon className="w-5 h-5" />,
    baseFunction: 'Volume -',
    shortcut: 'Fn + F11',
    macroFunction: 'Brightness +',
    description: 'Increase brightness'
  },
  {
    key: 'F12',
    icon: <MoonIcon className="w-5 h-5" />,
    baseFunction: 'Volume +',
    shortcut: 'Fn + F12',
    macroFunction: 'Brightness -',
    description: 'Decrease brightness'
  }
];

const FunctionRowDemo = () => {
  const [timelineStep, setTimelineStep] = useState(0);
  const [isFnPressed, setIsFnPressed] = useState(false);
  const [activeKey, setActiveKey] = useState(null);
  const [showOverlay, setShowOverlay] = useState(false);

  // Animation timeline
  useEffect(() => {
    const timeline = [
      // Initial state
      () => {
        setIsFnPressed(false);
        setShowOverlay(false);
        setActiveKey(null);
      },
      // Show overlay
      () => {
        setIsFnPressed(true);
        setShowOverlay(true);
      },
      // Highlight meeting key (F1)
      () => setActiveKey(1),
      // Highlight mute key (F2)
      () => setActiveKey(2),
      // Highlight screen share (F3)
      () => setActiveKey(3),
      // Reset state
      () => {
        setIsFnPressed(false);
        setShowOverlay(false);
        setActiveKey(null);
      }
    ];

    const durations = [2000, 1500, 2000, 2000, 2000, 2000];
    
    const timer = setInterval(() => {
      setTimelineStep((prev) => {
        const next = (prev + 1) % timeline.length;
        timeline[next]();
        return next;
      });
    }, durations[timelineStep]);

    return () => clearInterval(timer);
  }, [timelineStep]);

  return (
    <div className="w-full min-h-screen bg-gray-100 font-poppins p-8 flex flex-col items-center justify-center gap-8">
      {/* Screen */}
      <div className="w-full max-w-5xl aspect-video bg-gray-900 rounded-2xl shadow-2xl relative overflow-hidden">
        {/* Wallpaper */}
        <div className="absolute inset-0 bg-gradient-to-br from-purple-900 to-blue-900 opacity-50" />
        
        {/* Fake window */}
        <div className="absolute inset-8 bg-white/10 backdrop-blur-md rounded-lg border border-white/20 shadow-xl">
          <div className="h-8 border-b border-white/20 flex items-center px-4 gap-2">
            <div className="flex gap-1.5">
              <div className="w-3 h-3 rounded-full bg-red-400" />
              <div className="w-3 h-3 rounded-full bg-yellow-400" />
              <div className="w-3 h-3 rounded-full bg-green-400" />
            </div>
          </div>
        </div>

        {/* Function Row Overlay */}
        <AnimatePresence>
          {showOverlay && (
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="absolute top-4 inset-x-4 z-50"
            >
              <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-2xl border border-purple-500/20">
                <div className="grid grid-cols-13 gap-2">
                  {functionKeys.map((key, idx) => (
                    <motion.div
                      key={key.key}
                      className={`p-3 rounded-xl transition-all ${
                        activeKey === idx ? 'bg-purple-600 text-white ring-2 ring-purple-400' : 
                        'bg-white/50 text-gray-800 hover:bg-purple-50'
                      }`}
                      animate={{
                        scale: activeKey === idx ? 1.05 : 1,
                        opacity: activeKey === idx || activeKey === null ? 1 : 0.5
                      }}
                    >
                      <div className="flex flex-col items-center gap-2">
                        <div className="p-2">{key.icon}</div>
                        <span className="text-xs font-medium">
                          {isFnPressed ? key.macroFunction : key.baseFunction}
                        </span>
                        {isFnPressed && (
                          <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="text-[10px] opacity-75"
                          >
                            {key.shortcut}
                          </motion.div>
                        )}
                        {activeKey === idx && (
                          <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="text-[10px] text-center mt-1"
                          >
                            {key.description}
                          </motion.div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Keyboard */}
      <div className="w-full max-w-5xl bg-gray-200 rounded-3xl p-8 shadow-2xl relative">
        <div className="grid grid-cols-13 gap-2">
          {functionKeys.map((key, idx) => (
            <motion.button
              key={key.key}
              className={`h-12 bg-white rounded-lg shadow-lg flex items-center justify-center text-sm font-medium ${
                activeKey === idx ? 'ring-2 ring-purple-500' : ''
              }`}
              animate={{
                scale: activeKey === idx ? 0.95 : 1,
                backgroundColor: activeKey === idx ? '#9333ea' : '#ffffff',
                color: activeKey === idx ? '#ffffff' : '#1f2937'
              }}
            >
              {key.key}
            </motion.button>
          ))}
        </div>

        {/* Fn key */}
        <motion.div
          className="absolute bottom-4 left-4 px-6 py-3 bg-gray-800 text-white rounded-xl shadow-lg"
          animate={{
            scale: isFnPressed ? 0.95 : 1,
            backgroundColor: isFnPressed ? '#9333ea' : '#1f2937'
          }}
        >
          fn
        </motion.div>

        {/* Mode indicator */}
        <div className="absolute bottom-4 right-4 flex items-center gap-2">
          <span className="text-sm font-medium">
            {isFnPressed ? 'Macro Mode' : 'Standard Mode'}
          </span>
          <motion.div
            animate={{
              backgroundColor: isFnPressed ? '#9333ea' : '#9ca3af'
            }}
            className="w-2 h-2 rounded-full"
          />
        </div>
      </div>
    </div>
  );
};

export default FunctionRowDemo;